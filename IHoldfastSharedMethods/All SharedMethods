// IHoldfastSharedMethods 1
void OnSyncValueState(int value) { }
void OnUpdateSyncedTime(double time) { }
void OnUpdateElapsedTime(float time) { }
void OnUpdateTimeRemaining(float time) { }
void OnIsServer(bool server) { }
void OnIsClient(bool client, ulong steamId) { }
void OnRoundDetails(int roundId, string serverName, string mapName, FactionCountry attackingFaction, FactionCountry defendingFaction, GameplayMode gameplayMode, GameType gameType) { }
void PassConfigVariables(string[] value) { }
void OnPlayerJoined(int playerId, ulong steamId, string name, string regimentTag, bool isBot) { }
void OnPlayerLeft(int playerId) { }
void OnPlayerSpawned(int playerId, int spawnSectionId, FactionCountry playerFaction, PlayerClass playerClass, int uniformId, GameObject playerObject) { }
void OnPlayerHurt(int playerId, byte oldHp, byte newHp, EntityHealthChangedReason reason) { }
void OnPlayerKilledPlayer(int killerPlayerId, int victimPlayerId, EntityHealthChangedReason reason, string details) { }
void OnScorableAction(int playerId, int score, ScorableActionType reason) { }
void OnPlayerShoot(int playerId, bool dryShot) { }
void OnShotInfo(int playerId, int shotCount, Vector3[][] shotsPointsPositions, float[] trajectileDistances, float[] distanceFromFiringPositions, float[] horizontalDeviationAngles, float[] maxHorizontalDeviationAngles, float[] muzzleVelocities, float[] gravities, float[] damageHitBaseDamages, float[] damageRangeUnitValues, float[] damagePostTraitAndBuffValues, float[] totalDamages, Vector3[] hitPositions, Vector3[] hitDirections, int[] hitPlayerIds, int[] hitDamageableObjectIds, int[] hitShipIds, int[] hitVehicleIds) { }
void OnPlayerBlock(int attackingPlayerId, int defendingPlayerId) { }
void OnPlayerMeleeStartSecondaryAttack(int playerId) { }
void OnPlayerWeaponSwitch(int playerId, string weapon) { }
void OnPlayerStartCarry(int playerId, CarryableObjectType carryableObject) { }
void OnPlayerEndCarry(int playerId) { }
void OnPlayerShout(int playerId, CharacterVoicePhrase voicePhrase) { }
void OnConsoleCommand(string input, string output, bool success) { }
void OnRCLogin(int playerId, string inputPassword, bool isLoggedIn) { }
void OnRCCommand(int playerId, string input, string output, bool success) { }
void OnTextMessage(int playerId, TextChatChannel channel, string text) { }
void OnAdminPlayerAction(int playerId, int adminId, ServerAdminAction action, string reason) { }
void OnDamageableObjectDamaged(GameObject damageableObject, int damageableObjectId, int shipId, int oldHp, int newHp) { }
void OnInteractableObjectInteraction(int playerId, int interactableObjectId, GameObject interactableObject, InteractionActivationType interactionActivationType, int nextActivationStateTransitionIndex) { }
void OnEmplacementPlaced(int itemId, GameObject objectBuilt, EmplacementType emplacementType) { }
void OnEmplacementConstructed(int itemId) { }
void OnCapturePointCaptured(int capturePoint);
void OnCapturePointOwnerChanged(int capturePoint, FactionCountry factionCountry) { }
void OnCapturePointDataUpdated(int capturePoint, int defendingPlayerCount, int attackingPlayerCount) { }
void OnBuffStart(int playerId, BuffType buff) { }
void OnBuffStop(int playerId, BuffType buff) { }
void OnRoundEndFactionWinner(FactionCountry factionCountry, FactionRoundWinnerReason reason) { }
void OnRoundEndPlayerWinner(int playerId) { }
void OnVehicleSpawned(int vehicleId, FactionCountry vehicleFaction, PlayerClass vehicleClass, GameObject vehicleObject, int ownerPlayerId) { }
void OnVehicleHurt(int vehicleId, byte oldHp, byte newHp, EntityHealthChangedReason reason) { }
void OnPlayerKilledVehicle(int killerPlayerId, int victimVehicleId, EntityHealthChangedReason reason, string details) { }
void OnShipSpawned(int shipId, GameObject shipObject, FactionCountry shipfaction, ShipType shipType, int shipName) { }
void OnShipDamaged(int shipId, int oldHp, int newHp) { }

// IHoldfastSHaredMethods 2
void OnPlayerPacket(int playerId, byte? instance, Vector3? ownerPosition, double? packetTimestamp, Vector2? ownerInputAxis, float? ownerRotationY, float? ownerPitch, float? ownerYaw, PlayerActions[] actionCollection, Vector3? cameraPosition, Vector3? cameraForward, ushort? shipID, bool swimming) { }
void OnVehiclePacket(int vehicleId, Vector2 inputAxis, bool shift, bool strafe, PlayerVehicleActions[] actionCollection) { }
void OnOfficerOrderStart(int officerPlayerId, HighCommandOrderType officerOrderType, Vector3 orderPosition, float orderRotationY, int voicePhraseRandomIndex) { }
void OnOfficerOrderStop(int officerPlayerId, HighCommandOrderType officerOrderType) { }

// IHoldfastSharedMethods 3
void OnStartSpectate(int playerId, int spectatedPlayerId) { }
void OnStopSpectate(int playerId, int spectatedPlayerId) { }
void OnStartFreeflight(int playerId) { }
void OnStopFreeflight(int playerId) { }
void OnMeleeArenaRoundEndFactionWinner(int roundId, bool attackers) { }
void OnPlayerConnected(int playerId, bool isAutoAdmin, string backendId) { }
void OnPlayerDisconnected(int playerId) { }
